:PROPERTIES:
:ID:       24d43f89-27be-44a7-8a31-0a949dbf96b6
:END:
#+title: Certs - AWS Solutions Architect

* TODO: install windows on the work laptop
* Knowledge
** Networking
*** VPC (Virtual Private Cloud)
Allow for resources to be isolated while in the same account giving full control over networking:
- Subnets: IP address
- Route tables: what path information to and from takes place
- Firewall: Security Groups/NACLS
- Gateways
*** NOTES: VPC are specific to a single region only

Every VPC has a range of IP addresses assigned through a CIDR block. Can only be between size 16 and 28
#+begin_example
0 -> 255 = 8 bits
192.168.0.0/16 grants
192.168.0.0 -> 192.168.255.255

0 -> 15 = 4 bits
192.168.0.0/28 grants
192.168.0.1 -> 192.168.0.14
#+end_example

AWS gives a default VPC with a default config, a custom VPC is configured by yourself.
Default:
- One Default VPC per region
- /16 ipv4 CIDR 172.31.0.0/16
- /20 default subnet in each AZ 
- Internet gateway
- a route that points all traffic (0.0.0.0/0) accessible from the internet
  
*** Subnets
Groups of IP address within a VPC.
- Subnets within a VPC must be within the CIDR range.
- subnet block size must be between /16 /28
- the first 4 IP addresses of a subnet are reserved and cannot be used e.g. =192.168.10.1 -> 192.168.10.3=
#+begin_example
10.0.1.0/24
10.0.1.0 -> 10.0.1.255
with the exception of the first 3 and the last one
#+end_example
**** CRIT: Subnets cannot overlap with other subnets in the vpc. Still be careful about VPC peering
- Subnets can communicate with other subnets in the VPC (by default)
There is an option to auto-assign public ipv4/ipv6 to a private address
Subnets can be made public/private using internet gateways/nat gateways

*** Route Table
Each VPC has a VPC router which has a router interface in each subnet of the vpc using the first address of each subnet for traffic routing. e.g. =10.0.1.0/24= will give =10.0.1.1= Its main purpose is to wrap traffic between subnets and VPC.
Route tables is a set of rules that the router uses to forward traffic. Each rules are =routes= using the destination ip to match the target resources/ip/gateway/ec2
AWS gives preference to overlaping packet that uses a greater rule e.g. /24 > /16
**** CRIT: One subnet can only be associated with one route table. A route table may have more than one subnet associated to

*** Internet Gateways
To make a subnet public you must use an Internet Gateway and, using a route table, points the default =0.0.0.0/0= to the IGW. IGW are region and VPC specific. 
**** CRIT: An internet gateway can only be attached to one VPC at a time. A VPC can only have one Internet Gateway

*** Nat Gateways
Used for Private subnets that needs access to the internet, but only if the connection is initiated from withing AWS and not from the internet. You still require a public subnet + IGW with =0.0.0.0/0= default route and the NAT Gateway deployed to the public subnet. You need to configure the private subnet to have a default route =0.0.0.0/0= that point to the nat gateway. Costs: Charged by the hour and per GB of data processed.
**** CRIT: NAT gateways aren't region resilient as it is only installed on a specific subnet. They are AZ-reliant service. Also uses Elactic IPs
If building for resilience/redundancy ensure that you deploy private sunets in different AZ, each with a NAT gateway. This means 1:1 relation private subnets:Route Tables each with a distinct NAT on a different public subnet

*** Private/Public subnets
Should devices on the internet be able to interact with our services? If its a webpage, then yes! If its a db, then no place it in a private subnet.

*** Lab
How to ssh into a private EC2/resource from a public EC2
#+begin_src bash

  scp -i ec2-user.pem ec2-user.pem ec2-user@<public-IP>:~/
  ssh -i ec2-user.pem ec2-user@<insert-public-ip>
  ssh -i ec2-user.pem ec2-user@<insert-private-ip>
#+end_src

*** DNS(VPC)
auto-generated AWS dns for resources.
AWS DNS server can be accessed on the second IP of the VPC CIDR block as well as 169.254.169.253
Device private IPs will automatically be assinged a DNS entry
enabledDNSHostnames: whether the VPC supprot assigning public DNS hostnames to instances with public IP addresses (false by default)
enableDnsSupport: determines whether the VPC supports DNS resolution through AWS provided DNS server. If doing so you must provide your own dns resolver (either custom or 8.8.8.8)
#+begin_example
In a public EC2 you can check the resolv.conf
cat /etc/resolv.conf
If for example the vpc CIDR block is 10.0.0.0/16 the dns nameserver would be 10.0.0.2
#+end_example

Can be modified later

*** Elastic IP
AWS static IPv4 address reserved for your acct. By default upblics IPs are not static and, if an EC@ instances goes down, then it will get a new public IP. One elastic IP per resource can be assigned, more inquires charges
**** CRIT: region specific

*** Security Group and NACL (firewall)
Stateless firewall (Default firewalls): must be configured to allow both inbound & outbound traffic declaratively.
Statefull firewall: firewall that is smart enough to understand which request and response are part of the same connection (port-wise)

network access control list (NACL): filter traffic entering and leaving a subnet, are stateless firewalls so rules must be be for both inbound/outbound, and doesn't filter traffic within a subnet. Every subnet within a VPC must be assicuated with a NACL however a NACL can be associated with multiple subnets
Security Group : act as statefull firewall for individual AWS resources. Unless SG rules are specified they are denied by default. More than one SG can be applied to a resources and will be merged at evaluation time.
nacl, the smaller the rule number the sooner they will be processed.

**** CRIT: NACL act as firewall for subnets while SG act as firewalls for individual AWS resources. NACL can allow or deny traffic while SG only allow.
**** CRIT: SG by default contains an inbound/outbound rule that allows for all traffic

*** Load Balancers
Acts as a single ingress point for multiple resources directing traffic.
3 types of load balancer:
- classic lb
- application lb (application L7): https until the ALB then http to the resources
- network lb (TCP/UDP L4): meant for apps that don't use http/https, faster than ALB, forwards the connections

You configure the availability zone to the LB by assigning subnets by deploying a Load balancing node to the specific subnet (public).
cross-zone LB: Allows for traffic to be rerouted between AZ compute resources

Public LB (deployed on public subnets) Private LB (deployed on private subnets). Uses cases: multiple API compute behind a public LB talking to a private LB (db connections)

Listener: forwards incoming request to a target group based on defined parameters e.g. app1.com vs app2.com/auth 
Target groups: forwards to specific compute resources
You can also configure health checks

*** Virtual Private Network (VPN)
Use case: communicate between on-premise network with AWS Virtual Private cloud (VPC) safely and securely. First you create a VPN gateway on the VPC and Customer gateway on-premise They both get an IP address and communicates between encrypted.
To route traffic between we can use a route in a routing table (static) or exchange route dynamically using bgp. (dynamic)
Costs: per hour per VPN connections + data transfer
limits 1.25 gbps bandwith

*** Direct Connect
Alternative to VPN, allows you to to =physically= connect with AWS. Essentially directly connect to a regional data center where AWS rents a few server racks.
Charged by port/hours + outbound data transfer. Faster + more secure than VPN

*** VPC Peering
reminder, a vpc acts as a network boundary unless a connection between them are established e.g. VPC peering connections.
No costs for VPC peering connections, no costs for data transfer within a VPC, data transfer across AZ through a VPC peering incurs charges.

#+begin_example
VPC 1 10.1.0.0/16
VPC 2 10.2.0.0/16
Create the connection then update each VPC's route table to access each other's VPConnection then update each VPC's route table
rt-1 in vpc-1
(dest) 10.2.0.0/16 (target) vpc-2 through peering connections
rt-2 in vpc-2
(dest) 10.1.0.0/16 (target) vpc-1 through peering connections
#+end_example

*** Transit Gateway
#+begin_example
Say you have 2 VPC 1->3 where 1 is connected to 2 and 2 to 3 through a vpc peering
VPC 1 cannot talk to vpc 3 through vpc 2 (transitive vpc not supported) 
Now say you have n vpc then it can get insane to manage.
#+end_example
The solution is to use a transit gateway where all VPCs connects to.
**** CRIT: must specify one subnet from each AZ (us-east-1, us-west-2, etc.) to be used by the transit gateway to route traffic
Quite usefull also if you have an on-prem datacenter and say 4 VPC. Instead of having a VPN connection/direct connect between each we can use one transit gateway.
Transit gateways can connect to one another.

*** PrivateLink
providing access to public resources like s3 bucket to our internal resources. Use to connect public AWS services to to other VPCs.

*** Cloudfront
Basically a content delivery network (CDN) that uses AWS edge locations to minimize latency. Its a web service that speeds up distrubution of static(s3 bucket)/dynamic(amazon lightsail) content using AWS edge location.

**** Cloudfront Architecture
Origin is the source location for content that will be cached by cloudfront edge's locations. Cached content at an edge location remains for a set time: Time To Live (TTL) default 24hrs
You can cache invalidate the content to clear the cache at the edge's location which are performed at a =distribution=
#+begin_example
/* # entire distribution
/file.txt # just that file
/imgs/* # all object in that dir
#+end_example

While Cloudfront gives you a DNS + SSL cert you can use custom domain/SSL cert using AWS certificate Manager (ACM).
Use cases: static websites (server side logic), media files

#+begin_example
Say you have one img (car.jpg) in an s3 bucket at root / that you want to distribute using cloudfront.
the cloudfront distribution address will require (dnsName.cloudfront.com/car.jpg)
#+end_example

*** Lambda@Edge
Allows to write lightweight function at edge location to manipulate requests and responses that flow through cloudfront.
| Trigger          | Description                                                                                       | Cache Interaction          |
|------------------+---------------------------------------------------------------------------------------------------+----------------------------|
| Viewer Request   | Executes after CloudFront receives a request from the viewer, before checking the cache.          | Before cache check         |
| Origin Request   | Executes only when CloudFront forwards a request to the origin, when the object is not in cache.  | Before forwarding to origin |
| Origin Response  | Executes after CloudFront gets the response from the origin, before caching the object.           | Before caching the response |
| Viewer Response  | Executes before CloudFront forwards the response to the viewer, regardless of caching.            | Before response to viewer  |

If your function is sub millisecond you can use cloudfront functions if longer (5-30sec) a lambda@edge function can work

*** Global Accelerator
an edge node that uses AWS backbone connection to optimize time take to reach apps, unlike cloudfront which is used for caching data.

*** route53
AWS managed DNS
- Can purchase a domain name through the registrar
Hosted zone is allocated to 4 nameservers by AWS

| Type  | Description                                                                                   | Purpose                                                                                                   |
|-------+-----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------|
| A     | Maps a domain to the IP address (IPv4) of the computer hosting the domain.                     | Used for converting human-readable domain names into computer-readable IP addresses.                     |
| AAAA  | Maps a domain to the IP address (IPv6) of the computer hosting the domain.                     | Similar to A records, but for IPv6 addresses, which allows for a larger number of IP addresses.          |
| CNAME | Maps a domain to another domain name (canonical name) instead of an IP address.                | Used for aliasing one domain name to another domain name, useful for managing multiple services under one domain. |

*** Route 53 Application Recovery Controller

Automating backup location and recovery failures using a Application Recovery Controller (ARC). This continuously performs readiness checks.
new concept cell: all resourceds required for an application to operate independently
recovery group is a collection of cells that represent an application that I want to check for failover readiness e.g. (active + standby cell)


** Service Storage

** Service Compute

** Service Database

** Services Application Integrations

** Services Data and ML

** Services Migration and ...

** Services Management and ...

** Services Security

* Design

** Security

** Reliability

** Performance

** Cost-optimization

** Applying your desing skills

* Conclusion


