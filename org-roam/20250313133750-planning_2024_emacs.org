:PROPERTIES:
:ID:       E56FBF4A-27B5-417A-960B-BD0D5C8E16A6
:END:
#+title: Learning - 2025 - Emacs

* return


* Emacs

** .Spacemacs
To configure one off packages that aren't part of a layer use the =dotspacemacs-additional-packages= list. While in the list you can futher customize it by accessing the package's config with the =:config= option.

I am sure there are more possibilities that I am not awayre
#+begin_src elisp
    (fic-mode ;; use <spc g g> to jump into the definition of the package for easier configuration
      :config
      (setq fic-author-name-regexp '("WARN")))
#+end_src

*** emacs api
**** add to list
Given a list that we want to append an element to it calling =add-to-list= will do just that
#+begin_src elisp
(add-to-list 'hl-todo-keyword-faces '("WARN" . "#FFA500"))
#+end_src


** Productivity
*** ~spc a~ application
**** ~spc a o~ org
~spc a o o~ org agenda (hydra)
~spc a o r~ org roam
~spc a o r c~ org-roam capture (needs a template)

*** ~spc g~ git
~spc g s~ maggit status

~r i~ rebase interactively. You want to rebase your changes onto master so that they come first

use =smerge= to handle changes
**** TODO: change smerge bindings to ~spc o g s ~

*** shells
honestly, I want the same as I get from kitty
~vterm~
~eshell~ not really a shell but a great elisp testing env and to learn about elisp
#+begin_src elisp
(defun greet-person (name)
  "Echo a greeting message with the given NAME."
  (message "Hello, %s!" name))
#+end_src
[[https://www.youtube.com/watch?v=2LzDgaen1cQ][The Different Shells Available In Emacs - YouTube]]

*** buffer ~spc c~
~spc b .~ buffer transient mode ( allow for buffer movement)

*** text ~spc x~
~spc x K~ move line up
~spc x J~ move line down

*** lsp/error ~spc e~
~] q/l~  ~spc e n~ next error
~[ q/l~ ~spc e p~ previous error

*** help ~spc h~
~spc h d <command>~ describe
~spc h d m~ describe current mode (super usefull)

*** dired ~spc f j/spc a d~
a better way to navigate the filetree and create/modify
~s~ toggle sorting options
~C~ copy file(s)
~d~ mark file(s) for deletion ~x~ to execute the deletion
~D~ to delete immediately
~M~ chmod
~O~ chwon (change the owner)
~X~ execute bash command
~c-x c-f~ create file
~+~ create dir
~^/-~ move up the folder

~m -> R~ move dir/files
~t~ mark-all
~m~ mark
~u~ unmark


*** bookmarks ~c-x r~
Bookmarks are somewhat like registers in that they record positions you can jump to. Unlike registers, they have long names, and they persist automatically from one Emacs session to the next.
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][Bookmarks (GNU Emacs Manual)]]

*** registers ~spc r~
Emacs registers are compartments where you can save text, rectangles, positions, and other things for later use.
~spc r l~ reopen last helm window
~spc r s~ reopn last search window e.g. ~spc s a a~
~spc r w~ reopen last closed window
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][Registers (GNU Emacs Manual)]]

*** helm
often using a service helm closes the window after usage e.g. =lazy-helm/spacemacs/helm-find-files= which correspond to ~spc f f~

We can use registers ~spc r~ to jump back into our search quickly.
*** keybindings (the shear number of them)
~SPC h d K <keymap>~
You can view general ones like =helm-map= or specific ones like =helm-ag-map=
**** usefull ones:
mark ~c-SPC~

*** searching
=<scope>=
d: current dir
b: opened buffers

49:  const test2: any = "hello world!" // ds" removes "
- grep ~SPC s g <scope>~
- ripgrep ~SPC s g <scope>~
- ag ~SPC s a <scope>~
- web ~SPC s w g~ (google only)

*** Quickfix-ish
using ~occur~ for single buffer ~multi-occur~ for all opened buffers, ~multi-occur-in-matching-buffers~ for matching ones and ~projectile-multi-occur~ for all within a project

*** evil-motion
Using ~g s [sS]~ to jump directly to a word either forward ~s~ or backward ~S~ depneding on the position of your cursor. You can use ~g s <evil-motion-verb>~ to jump to line

*** evil-surround
Tool that enables the addition, change and removal or parentheses, brackets, quotes, XML tags?, etc.

Changes/deletion
#+begin_src ts
  const test: any = "hello world!" // cd"' changes to " -> ' also works with <q>
  const test2: any = "hello world!" // ds" removes "

  const testHtml: any = <bs>hello world!</bs> // cs"<l> changes " -> <l>
      // to change from that use cst<your-desired-surround>
#+end_src
Additions
#+begin_src ts
  const testBraces: any = { hello } world // ysiw surround hello with []
  // wrap the entire line yss) or yssb
  (wrap the entire line hello world)
#+end_src
**** Reference
[[https://github.com/tpope/vim-surround][GitHub - tpope/vim-surround: surround.vim: Delete/change/add parentheses/quot...]]

*** Folds management

** Spacemacs/layers
*** Emmet
Part of html by
#+begin_src html
  ul>li*5
#+end_src
[[https://docs.emmet.io/cheat-sheet/][Cheat Sheet]]
=C-j= ~emmet-expand-line~

** OrgMode
*** link
~SPC M i L~ to insert an internet link
~SPC M i l~ to insert an a link (file/w3m/treemacs/etc.)
You can target a file specific line too.
#+begin_src org
file:~/code/main.c::255
#+end_src
**** References
[[https://orgmode.org/guide/Hyperlinks.html][Hyperlinks (Org Mode Compact Guide)]]
