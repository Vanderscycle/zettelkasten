:PROPERTIES:
:ID:       660c7092-9b98-4fa2-b271-2bbeabe1c249
:END:
#+title: Programming

* Root
[[id:9d5c388a-88cd-423c-951b-5e512eae298b][Knowlege base]]

* Tutorials
[[id:2635f285-16cf-415b-85e2-ecc22bacf584][Tutorial - git for gear heads]]

* Programming
** General
- [[id:2eebfdfb-e401-4d9c-a7f0-7d6ca47585ad][Programming - Computer Science]]

** Certifications
- [[id:4aac16ce-ce76-4f97-9328-0f8166186fce][cert - CKAD]]
- [[id:cd0fcbf2-addf-48e6-8f15-44b95afd207d][cert - AWS Solution Architect]]

** Cloud
- [[id:867654f4-3f6f-43d9-94ca-db34bfc3edc2][AWS Playbook]]

** Web Framework
*** NextJS
- [[id:2c0dc857-c4a0-4a50-be56-e6c28e74186b][Programming - NextJS]]

*** Sveltekit
Dockerizing the app
1. Ensure that you have the node adapter for sveltekit
#+begin_src bash
pnpm i -D @sveltejs/adapter-node
#+end_src

** Languages
- Latex
the required spacemacs vars to run on =spacemacs=
#+begin_src elisp
     (latex :variables
            latex-enable-auto-fill t
            latex-enable-folding t
            latex-view-pdf-in-split-window t
            latex-backend 'lsp
            latex-refresh-preview t
            lsp-latex-build-on-save t
            latex-build-command "LaTeX") ;; oh baby its time to go even beyond
(add-hook 'LaTeX-mode-hook
          (defun fn/latex-compile-on-save ()
            (add-hook 'after-save-hook (lambda () (TeX-command-run-all nil)) nil t)))
#+end_src

Essentially when editing have 2 windows one with the pdf and one with the ~.tex~ file. It will recompile on save.

- [[id:205000be-2427-4660-89ab-a1d0f0c9eebf][Programming - GO]]
- [[id:d04ef69b-d3e3-452a-a2a4-ae06e238687d][Programming - Bash]]
- [[id:0b8da363-eaf4-4c96-a8b4-2975ff99ea65][Programming - Nix]]
- [[id:bdd3bf17-ccce-488a-96e9-031694daa04e][Programming - TypeScript]]
- [[id:c7548fda-997a-4221-8aaf-6052867bf5eb][Programming - SQL]]
- PHP
*** db migration
Drop all tables and rebuild
#+begin_src bash
  php artisan migrate:fresh && php artisan db:seed
  # migrate normally
  php artisan migrate
#+end_src

** IaC
- [[id:4376ef2d-5578-4603-9bc6-2597e79ef9bd][Programming - Terraform]]
- [[id:111c87db-cb78-4ddc-822f-fa062f7020e3][Programming - AWS CDK]]
- Kubernetes
*** Get latest kubeconfig
#+begin_src bash
kubectl config view --raw
#+end_src

*** Troubleshooting
unable to delete pv (homelab situation)
#+begin_src bash
kubectl patch pv <pv> -p '{"metadata": {"finalizers": null}}'
kubectl delete pv <pv> -A  --grace-period=0 --force
#+end_src

*** one off pod
#+begin_src bash
kubectl run -i --tty --rm debug --image=curlimages/curl --restart=Never -- sh
#+end_src

** Homelab
*** PVC
Persistent Volumes are not automatically created by default. Certain cloud operator like Akamai/Linode do it for you, however in a homelab you have to read the docs.
[[https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/][Dynamic Volume Provisioning | Kubernetes]]

What is required to be added
#+begin_src yaml
# [...]
  storageClassName: local-path
# [...]
#+end_src
- [[id:111c87db-cb78-4ddc-822f-fa062f7020e3][Programming - AWS CDK]] TODO: create the file again



*** Local K3s
**** Getting the config
The config is located on the server(s) =/etc/rancher/k3s/k3s.yaml=. You can symlink it locally as follow
#+begin_src bash
    # creates a copy
    mkdir -p ~/.kube
    sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    sudo chown $(id -u):$(id -g) ~/.kube/config
    # symlink it
  mkdir -p ~/.kube
  ln -s /etc/rancher/k3s/k3s.yaml ~/.kube/config

#+end_src


A better approach is to copy the config to your machine and use =k9s= to access it from your computer
#+begin_src yaml
clusters:
- cluster:
    server: https://<server-ip>:6443
#+end_src

Then set it as your variable so that =k9s= can access it.
#+begin_src fish
  set -xg KUBECONFIG $HOME/.kube/homelab-kubeconfig.yaml
#+end_src

**** Changed the ip
Before you change the ip, backup the data you are about to lose.

let's say you changed the node ip for whatever reason and you can't connect to the cluser any longer. You must rest
***** control plane
#+begin_src bash
sudo systemctl stop k3s

# if mv doesn't work just cp then rm -rf the etcd folder
sudo mv /var/lib/rancher/k3s/server/db/etcd /var/lib/rancher/k3s/server/db/etcd.backup
#+end_src
***** worker
#+begin_src bash
  sudo systemctl stop k3s-agent # if running

  sudo rm -rf /var/lib/rancher/k3s/
#+end_src
- [[id:111c87db-cb78-4ddc-822f-fa062f7020e3][Programming - AWS CDK]]
- [[id:dc451d87-892c-4265-bc16-00e8794fdf4c][Docker]]
- [[id:48ec7d8d-799f-4a7f-a6c6-633f1ac42e7e][Programming - CICD Github Actions]]

** Version control (git)
When your code used to work a few commits ago and since then it has tremendously regressed and you don't know why use ~git bisect~ and run a binary search.

** Security
*** Yubico keys
reset pin
#+begin_src bash
ykman piv access change-pin --pin 123456 --new-pin 654321
#+end_src
** Home Server
- [[id:cdac68bb-38c2-4602-a6d9-efc50134e63a][Programming - Proxmox]]
- [[id:9f5774f3-ed8e-4f59-ba4a-31a202e25128][RPI k3s cluster]]

** Linux
*** nnn
you can copy the list of files using =>=
nnn can extract ~.zip~ files to folders. Just press =enter= a few times
**** you can easily manage the movement of files using the bookmarks :pro:tip:
*** Drives
see what drives are availables ~lsblk~
 #+begin_src  nix
   # ensure that you also have /mnt/usb created
   usb-mount = "sudo mount /dev/sda1 /mnt/usb";
   usb-eject = "sudo umount /mnt/usb";
 #+end_src

*** create a bootable usb
#+begin_src bash
sudo dd if=<image.iso> of=/dev/<where you want> status=progress
#+end_src

*** wipe a drive/usb
Faster than parted but more destructive
#+begin_src bash
sudo wipefs -a /dev/sdX
#+end_src

*** Fish shell
**** Troubleshooting ssh agent
#+begin_src fish
eval (ssh-agent -c)
ssh-add ~/.ssh/<ssh-key>
#+end_src

*** CLI
**** Replace all instances
#+begin_src bash
find . -type f -exec sed -i 's/Foo/Bar/g' {} +
#+end_src
*** Tiling Window Manager
*** Kitty
keybindings:[[https://sw.kovidgoyal.net/kitty/overview/#tabs-and-windows][ Overview - kitty]]

** Misc concepts
- [[id:f6df9f15-f712-4280-bee2-68cd3d732a42][Programming - SOPS]]
*** Mount
#+begin_src bash
mount -l # list all mounted drives
#+end_src

** openssl
   generate new certificates by hand
  [[https://www.youtube.com/watch?v=VH4gXcvkmOY][How to create a valid self signed SSL Certificate? - YouTube]]
#+begin_src bash

openssl genrsa -aes256 -out ca-key.pem 4096 #you'll need a passphrase
openssl req -new -x509 -sha256 -days 3650 -key ca-key.pem -out ca.pem
openssl x509 -in ca.pem -text # human readable
# ---
openssl genrsa -out cert-key.pem 4096
openssl req -new -sha256 -subj "/CN=homecloud" -key cert-key.pem -out cert.csr
# had to be the correct ip/dns
echo "subjectAltName=DNS:*.homecloud.lan,IP:192.168.4.129" >> extfile.cnf
# generate the cert
openssl x509 -req -sha256 -days 3650 -in cert.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf  -CAcreateserial
cat cert.pem > fullchain.pem && cat ca.pem >> fullchain.pem
#+end_src

** Linux users
check
sudo -u paperless bash -c 'touch /mnt/paperless/data/test-write && echo OK'

#+begin_src bash
id <username like paperless>
# uid=315(paperless) gid=315(paperless) groups=315(paperless),986(smbaccess)

# act as the user
sudo -u <user> touch ./somerandomfile.txt
#+end_src
