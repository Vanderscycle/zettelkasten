:PROPERTIES:
:ID:       ab427009-adbf-49e0-befe-8ed8439b161b
:END:
#+title: Programming - Nix

* reproducible pain and misery
[[https://nixos-and-flakes.thiscute.world/nixos-with-flakes/nixos-flake-configuration-explained][flake.nix Configuration Explained | NixOS & Flakes Book]]
** create file
#+begin_src nix
  home-manager.users.${username} = {
    home = {
      file = {
        "/home/${username}/SpaceVim.d/init.toml".source = "${dotfiles_dir}/.config/SpaceVim.d/init.toml";
      };
    };
  }
#+end_src

** Using node2nix
Granted you have =node2nix= installed, create a package.json
#+begin_src bash
  # create the required files
  node2nix -i package.json
  nix-build default.nix
  #for shell only:
  nix-shell default.nix
#+end_src

** Upgrading channel (non-flakes)
Upgrading your configuration.nix w/ or without home-manager to an updated version e.g. 23.11
#+begin_src bash
sudo nix-channel --add https://nixos.org/channels/nixos-23.11 nixos
sudo nix-channel --update
sudo nixos-rebuild switch --upgrade
#+end_src

** Flakes
Running nixos configurations flakes
*** Allow unfres
#+begin_src nix
   description = "A very basic flake";

   inputs = { nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable"; };

   outputs = { self, nixpkgs }:
  let pkgs = import nixpkgs { system = "x86_64-linux"; config.allowUnfree = true; } in
  {}
#+end_src
*** nix-shell
instead use
#+begin_src bash
nix shell nixpkgs#python3
#+end_src
*** Errors
When getting this error:
#+begin_example
❯ sudo nixos-rebuild switch --flake .#laptop --impure
[sudo] password for henri:
warning: Git tree '/home/henri/Documents/dotFiles' is dirty
building the system configuration...
warning: Git tree '/home/henri/Documents/dotFiles' is dirty
error:
       … while calling the 'head' builtin

         at /nix/store/wcidiyklj0nrljlz5m3qlkvhv8f2ddv8-source/lib/attrsets.nix:960:11:

          959|         || pred here (elemAt values 1) (head values) then
          960|           head values
             |           ^
          961|         else

       … while evaluating the attribute 'value'

         at /nix/store/wcidiyklj0nrljlz5m3qlkvhv8f2ddv8-source/lib/modules.nix:809:9:

          808|     in warnDeprecation opt //
          809|       { value = builtins.addErrorContext "while evaluating the option `${showOption loc}':" value;
             |         ^
          810|         inherit (res.defsFinal') highestPrio;

       (stack trace truncated; use '--show-trace' to show the full trace)

       error: file 'nixpkgs-unstable' was not found in the Nix search path (add it using $NIX_PATH or -I)

       at «none»:0: (source not available)
#+end_example

commit the files in git

** Managing/Reverting nixos builds

#+begin_src  bash
  # list all versions
  sudo nix-env --list-generations --profile /nix/var/nix/profiles/system
  # If you are deleting the current gen, switch to a previous generation
  sudo nix-env --switch-generation 553 --profile /nix/var/nix/profiles/system
  # delete a generation
  sudo nix-env --delete-generations 554 --profile /nix/var/nix/profiles/system

#+end_src

** Updating flake's inputs

When running the flake file, it will not update the lock file. If you want to use the newest packages you must update the flake. Quite important if you use the unstable channel.

#+begin_src bash
nix flake update
#+end_src

** generate hardware.nix
#+begin_src bash
nix     nixos-generate-config --root /mnt \   --show-hardware-config > /mnt/where-ever/whatever.nix
#+end_src

** Travelling back in time

use Nixhub.io for easy package
[[https://www.nixhub.io/][Nixhub.io | A Nix Packages Registry]]

usefull video on the subject: [[https://www.youtube.com/watch?v=yQwW8dkuHqw][Nix Dev Environments | Declare Your Coding Projects - YouTube]]

*** nativeBuildInputs vs buildInputs

[[https://discourse.nixos.org/t/use-buildinputs-or-nativebuildinputs-for-nix-shell/8464/2][Use `buildInputs` or nativeBuildInputs` for `nix-shell`? - #2 by jonringer - ...]]

** Dynamically linked

Let's say we want to run android app testing but we get this error from nixos:

Error: Could not start dynamically linked executable: /home/henri/Android/Sdk/platform-tools/adb
NixOS cannot run dynamically linked executables intended for generic
linux environments out of the box. For more information, see:
https://nix.dev/permalink/stub-ld

We can leverage nixos to run non nixos [[executables][https://nix.dev/guides/faq#how-to-run-non-nix-executables]].

Please also refer to  [[nixpkgs-manual][https://ryantm.github.io/nixpkgs/builders/special/fhs-environments/]]

#+begin_src nix
with import <nixpkgs> {};

buildFHSUserEnv {
  name = "android-env";
  targetPkgs = pkgs: (with pkgs; [
    android-tools
    android-studio
    zlib
    glibc
    stdenv.cc.cc.lib
  ]);
  runScript = "fish";
  profile = ''
    ${pkgs.neofetch}/bin/neofetch
    echo -e "You are now in a dev shell in $(pwd)" | ${pkgs.lolcat}/bin/lolcat
  '';
}


#+end_src

if you are having issues with =unfree_software=, then when building run,

#+begin_src bash
set -x ANDROID_HOME $HOME/Android/Sdk
set -x PATH $PATH $ANDROID_HOME/emulator $ANDROID_HOME/platform-tools
---
set -xg NIXPKGS_ALLOW_UNFREE 1
nix-build android-env.nix --impure
./result/bin/android-env
# ---
# to remove the result folder
rm result
#+end_src

Since we are on the subject of android app dev set the following prior
#+begin_src bash
set -x ANDROID_HOME $HOME/Android/Sdk
    set -x PATH $PATH $ANDROID_HOME/emulator $ANDROID_HOME/platform-tools
#+begin_src
