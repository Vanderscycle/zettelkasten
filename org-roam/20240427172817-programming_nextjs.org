:PROPERTIES:
:ID:       2c0dc857-c4a0-4a50-be56-e6c28e74186b
:END:
#+title: Programming - NextJS
* NextJS
All roads leads to Javascript
** Documentation
[[https://nextjs.org/docs][Docs | Next.js]]
[[https://mui.com/material-ui/getting-started/][Overview - MaterialÂ UI]]
*** Tools
Using =emmet-mode=, by typing the emmet synthax then =C-j= to expand
#+begin_src html
ul>li.item$*3            <ul>
                             <li class="item1"></li>
                             <li class="item2"></li>
                             <li class="item3"></li>
                         </ul>
#+end_src
mui-theme creator
[[https://bareynol.github.io/mui-theme-creator/][Material UI Theme Creator]] 
**** References
[[https://github.com/smihica/emmet-mode][GitHub - smihica/emmet-mode: emmet's support for emacs.]]

** Features
*** Folder route structure
any folder within the =/app= folder will become a route. Any =.tsx/jsx= files within will be react server side component.

unless specified ="use client"= at the top of the page which will make it a client component. If you need to use a react hook/or state you must use client side.
#+begin_src ts
"use client"
import {useState} from 'react';
#+end_src

[[https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns][Rendering: Composition Patterns | Next.js]] 
**** Special NextJS files
- error.js
- layout.js
- loading.js
- page.js
*** Code splitting
*** Api router
Create the folder =api= within the =app= router to have the same express backend.
You aren't required and can instead use =route.js= it isn't recommended as file path conflicts may arrise.
#+begin_src ts
export async function GET(request) {
  return new Response("alive");
}
#+end_src
Also supports HEAD, POST, PUT, DELETE, PATCH methods

* Typescript
*** Object destructuring
#+begin_src typescript
// An object with two properties
const person = { name: "Alice", age: 25, hobby: "reading" };

// Destructuring the name and hobby properties and assigning default values
const { name, hobby = "reading" } = person;

// Destructuring the name property and omitting the rest
const { name, ...others } = person;

// Destructuring the name and age properties and renaming them to firstName and years
const { name: firstName, age: years } = person;

interface Person {
  name: string;
  age: number;
}

const { name, age }: Person = person;

console.log(name);
#+end_src

* Modern web
** Frontend
*** Search Engine Optimization
How a search engine like Google/Bing ranks your website when a users searches a specific term. 
**** Static Metadata
add the following
#+begin_src ts
export const metadata = {
  title: 'Home',
}
#+end_src
**** Dynamic Metadata
#+begin_src ts
export async function generateMetadata({params, searchParams}){
  const product = await getProduct(params.id);
  return { title: product.title };
}
#+end_src
*** Server Side Rendering (SSR)
Renders the webpage on the server then sends to the client.
*** Client Side Rendering (CSR)
Sends the html/js/css to the client

** Backend
*** Data Fetching
**** Server Side Rendering (SSR)
#+begin_src ts
async function getTool(toolId: string): ToolInterface {
  const res = await fetch(
    `http://${process.env.DB_HOST}:${process.env.DB_PORT}/api/collections/tools/records/${toolId}`,
{ cache: 'no-store' }
  );
  const data = await res.json();
  return data;
}
#+end_src
**** Static Site Generation (SSG)
Default behavior for NextJS, fetch the data and then caches it client side.
#+begin_src ts
async function getTool(toolId: string): ToolInterface {
  const res = await fetch(
    `http://${process.env.DB_HOST}:${process.env.DB_PORT}/api/collections/tools/records/${toolId}`,
  );
  const data = await res.json();
  return data;
}
#+end_src
**** Incremental Static Generation (ISR)
A mix of SSR/SSG where data is cached but only for a certain period of time.
#+begin_src ts
async function getTool(toolId: string): ToolInterface {
  const res = await fetch(
    `http://${process.env.DB_HOST}:${process.env.DB_PORT}/api/collections/tools/records/${toolId}`,
{ next: {revalidate: 10 } }
  );
  const data = await res.json();
  return data;
}
#+end_src
